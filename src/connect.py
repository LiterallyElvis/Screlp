# -*- coding: utf-8 -*-
from requests_oauthlib import OAuth1Session
import argparse
import sys
import pygmaps

parser = argparse.ArgumentParser(description="Fetches Yelp results.")
parser.add_argument("-t", "--term", action="store", dest="term",
                    help="Category on yelp to search for")
parser.add_argument("-a", "--address", action="store", dest="address",
                    required=True, help="Address to base query upon")
parser.add_argument("-r", "--radius", action="store", dest="radius", default=1,
                    help="Radius in miles from origin coordinate.")
parser.add_argument("-d", "--density", action="store", dest="density",
                    default=1, help="Grid density")

args = parser.parse_args()
items = []


class Business:
    """
    Business object to store desired data.

    Ultimately collected into a list of like objects for later comprehension.
    """
    def __init__(self):
        self.result_position = 0
        self.id = None
        self.name = None
        self.address = None
        self.city = None
        self.state = None
        self.zip = 00000
        self.rating = 0
        self.review_count = 0
        self.category = None
        self.query_performed = None


def get_geocode(args):
    """
    Returns GPS coordinates from Google Maps for a given location.
    """
    result = Geocoder.geocode(args.address)
    lat, long = result[0].coordinates
    lat = round(lat, 6)
    long = round(long, 6)
    return (lat, long)


def make_url(args, coords):
    """
    Returns a Yelp API URL based on arguments passed in the command line.
    """
    url = "http://api.yelp.com/v2/search?"
    lat, long = coords
    if args.term:
        url += "&term={0}".format(args.term).replace(" ", "+")
    if args.radius:
        radius = int((int(args.radius) * 1609) / int(args.density))
        url += "&radius_filter={0}".format(radius)
    url += "&ll={0},{1}".format(lat, long)
    url += "&sort=2"

    return url


def make_api_call(url, api_creds="yelp.creds"):
    """
    Imports Yelp API credentials from a locally stored file called yelp.creds

    Returns JSON result of API query.
    """
    with open(api_creds, "r") as credentials:
        consumer_key = credentials.readline().strip()[15:]
        consumer_secret = credentials.readline().strip()[18:]
        token = credentials.readline().strip()[8:]
        token_secret = credentials.readline().strip()[15:]

    yelp = OAuth1Session(consumer_key, consumer_secret, token, token_secret)

    api_result = yelp.get(url)
    api_result = api_result.json()
    return api_result


def parse_results(api_result, items, url):
    """
    Returns list of Business objects generated by API request.
    """    
    for x in range(0, api_result["total"]):  
        biz = Business()
        try:
            source = api_result["businesses"][x]
            biz.result_position = x+1
            biz.id = source["id"]
            biz.name = source["name"]
            if len(source["location"]["address"]) > 1:
                biz.address = source["location"]["address"][0]
                biz.address += ", " + source["location"]["address"][1]
            else:
                biz.address = source["location"]["display_address"][0]
            biz.city = source["location"]["city"]
            biz.state = source["location"]["state_code"]
            biz.zip = source["location"]["postal_code"]
            biz.rating = str(source["rating"])
            biz.review_count = str(source["review_count"])
            biz.category = source["categories"][0][0]
            biz.query_performed = url.replace("http://api.yelp.com/v2/search?", "")
            item = [biz.result_position, biz.id, biz.name, biz.address,
                    biz.city, biz.state, biz.zip, biz.rating,
                    biz.review_count, biz.category, biz.query_performed]
            items.append(item)
        except IndexError:
            break
        except KeyError:
            try:
                if api_result["error"]:
                    print("Error(s) encountered, please see raw_output.txt!")
                    write_raw_result(api_result)
                    sys.exit(1)
            except:
                write_raw_result(api_result)
    return items


def scrape_yelp(args, coords):
    items = []
    for coord in coords:
        url = make_url(args, coord)
        result = make_api_call(url)
        items = parse_results(result, items, url)
    return items


def eliminate_duplicate_results(results):
    old = results
    results = []
    for item in old:
        if item in results:
            pass
        else:
            results.append(item)

    return results
